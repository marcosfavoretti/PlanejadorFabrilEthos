services:
  # Backend Services (from planejamento-ethos/docker-compose.yml)
  api:
    container_name: planejamento_ethos_api
    build:
      context: ./planejamento-ethos # Usa o Dockerfile na raiz do projeto backend
      target: production
    image: planejamentoethos:latest
    ports:
      - "${API_PORT}:${API_PORT}"
    command: ["node", "dist/apps/planejamento-ethos/main.js"]
    environment:
      - BD=${BD}
      - TZ=${TZ}
      - SECRET=${SECRET}
      - EXPIREHOURS=${EXPIREHOURS}
      - CHECKPOINT_RANGE=${CHECKPOINT_RANGE}
      - PORT=${PORT}
      - BATELADAMAX=${BATELADAMAX}
      - PINTURAMAX=${PINTURAMAX}
      - ORACLEHOST=${ORACLEHOST}
      - ORACLEPORT=${ORACLEPORT}
      - ORACLEUSER=${ORACLEUSER}
      - ORACLEPASSWORD=${ORACLEPASSWORD}
      - ORACLESID=${ORACLESID}
      - SQLREPO=${SQLREPO}
      - ESTRUTURA_SERVICE=${ESTRUTURA_SERVICE}
      - SQLUSER=${SQLUSER}
      - SQLSENHA=${SQLSENHA}
      - SQLHOST=${SQLHOST}
      - SQLDATABASE=${SQLDATABASE}
      - SQLPORT=${SQLPORT}
      - HTTPEMAIL=${HTTPEMAIL}
      - NODE_ENV=${NODE_ENV}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - CORS_HOSTS=${CORS_HOSTS}
    depends_on:
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9279/api/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  worker:
    container_name: planejamento_ethos_worker
    build:
      context: ./planejamento-ethos
      target: production
    image: planejamentoethos:latest
    environment:
      - BD=${BD}
      - TZ=${TZ}
      - SECRET=${SECRET}
      - EXPIREHOURS=${EXPIREHOURS}
      - CHECKPOINT_RANGE=${CHECKPOINT_RANGE}
      - PORT=${PORT}
      - BATELADAMAX=${BATELADAMAX}
      - PINTURAMAX=${PINTURAMAX}
      - ORACLEHOST=${ORACLEHOST}
      - ORACLEPORT=${ORACLEPORT}
      - ORACLEUSER=${ORACLEUSER}
      - ORACLEPASSWORD=${ORACLEPASSWORD}
      - ORACLESID=${ORACLESID}
      - SQLREPO=${SQLREPO}
      - ESTRUTURA_SERVICE=${ESTRUTURA_SERVICE}
      - SQLUSER=${SQLUSER}
      - SQLSENHA=${SQLSENHA}
      - SQLHOST=${SQLHOST}
      - SQLDATABASE=${SQLDATABASE}
      - SQLPORT=${SQLPORT}
      - HTTPEMAIL=${HTTPEMAIL}
      - NODE_ENV=${NODE_ENV}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - CORS_HOSTS=${CORS_HOSTS}
    command: ["node", "dist/apps/planeja-worker/main.js"]
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  importador:
    container_name: planejamento_ethos_importador
    build:
      context: ./planejamento-ethos
      target: production
    environment:
      - BD=${BD}
      - TZ=${TZ}
      - SECRET=${SECRET}
      - EXPIREHOURS=${EXPIREHOURS}
      - CHECKPOINT_RANGE=${CHECKPOINT_RANGE}
      - PORT=${PORT}
      - BATELADAMAX=${BATELADAMAX}
      - PINTURAMAX=${PINTURAMAX}
      - ORACLEHOST=${ORACLEHOST}
      - ORACLEPORT=${ORACLEPORT}
      - ORACLEUSER=${ORACLEUSER}
      - ORACLEPASSWORD=${ORACLEPASSWORD}
      - ORACLESID=${ORACLESID}
      - SQLREPO=${SQLREPO}
      - ESTRUTURA_SERVICE=${ESTRUTURA_SERVICE}
      - SQLUSER=${SQLUSER}
      - SQLSENHA=${SQLSENHA}
      - SQLHOST=${SQLHOST}
      - SQLDATABASE=${SQLDATABASE}
      - SQLPORT=${SQLPORT}
      - HTTPEMAIL=${HTTPEMAIL}
      - NODE_ENV=${NODE_ENV}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - CORS_HOSTS=${CORS_HOSTS}
    image: planejamentoethos:latest
    command: ["node", "dist/apps/importa-pedido/main.js"]
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure

  redis:
    container_name: app_redis
    image: redis:alpine
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    # --- ALTERAÇÃO AQUI ---
    volumes:
      - redis-data:/data

  # Frontend Service (PlanejamentoEthosPortal)
  frontend:
    container_name: planejamento_ethos_frontend
    build:
      context: ./PlanejamentoEthosPortal
      dockerfile: Dockerfile
    environment:
      - API_URL=${API_URL}
      - API_SWAGGER=${API_SWAGGER}
    ports:
      - "${FRONT_PORT}:${FRONT_PORT}"
    depends_on:
      api:
        condition: service_healthy
    restart: always

# --- E AQUI ---
# Declaração do volume nomeado
volumes:
  redis-data: